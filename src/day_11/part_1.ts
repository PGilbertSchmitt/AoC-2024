import { flatten, times } from 'ramda';
import { input } from './input';

// Safe up to 14 digits, and the values generated by this problem are capped at 12 digits
export const numDigits = (value: number) =>
  Math.floor(Math.log(value) * Math.LOG10E) + 1;

export const blink = (value: number) => {
  if (value === 0) return 1;
  const digits = numDigits(value);
  if (digits % 2 === 0) {
    const size = digits / 2;
    const splitter = Math.pow(10, size);
    return [Math.floor(value / splitter), value % splitter];
  } else {
    return value * 2024;
  }
};

// Unused because Part 2 is the same but faster
export const blinkAtStones = (input: string, count: number) => {
  let stones = input.split(' ').map(x => parseInt(x));

  times(() => {
    stones = flatten(stones.map(blink));
  }, count);

  return stones.length;
};

const start = performance.now();
blinkAtStones(input, 25);
const end = performance.now();
console.log(`${end - start}ms`);
